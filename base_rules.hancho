import os

####################################################################################################
# C++

default_toolchain = dict(
    arch = "x86-64",
    compiler = "x86_64-linux-gnu-g++",
    linker = "x86_64-linux-gnu-g++",
)

# ----------------------------------------

check_cpp = dict(
    desc="Checking C++ syntax of {rel(in_src)}",
    command="{toolchain.compiler} {flags} {joined_warnings} {joined_defines} {joined_includes} -c {in_src} && touch {out_ok}",

    toolchain=default_toolchain,
    flags=["-fsyntax-only", "-std={cpp_std}"],
    warnings = None,
    defines = None,
    includes = None,
    out_ok="{in_src}.ok",

    cpp_std="gnu++2a",
    joined_warnings="{join('-W', warnings)}",
    joined_defines ="{join('-D', defines)}",
    joined_includes="{join('-I', includes)}",
)

# ----------------------------------------

compile_cpp = dict(
    desc="Compiling C++ {rel(in_src)} -> {rel(out_obj)} ({build_tag})",
    command="{toolchain.compiler} {flags} {joined_warnings} {joined_defines} {joined_includes} -c {in_src} -o {out_obj}",
    toolchain=default_toolchain,
    flags=[
        "-g",
        "-O0",
        "-MMD",
        "-march={toolchain.arch}",
        "-std={cpp_std}",
        "-fdiagnostics-color=always",
    ],
    cpp_std="gnu++2a",
    warnings = None,
    defines = None,
    includes = None,
    out_obj="{ext(in_src, '.o')}",

    # Note - this swaps out_obj and not in_src in case the user redirects out_obj
    in_depfile="{ext(out_obj, '.d')}",

    joined_warnings="{join('-W', warnings)}",
    joined_defines ="{join('-D', defines)}",
    joined_includes="{join('-I', includes)}",
)

if os.name == "nt":
    compile_cpp.command = "cl.exe /c {in_src} /sourceDependencies {in_depfile} /Fo:{out_obj}"
    compile_cpp.depformat = "msvc"


link_cpp_lib = dict(
    desc="Bundling C++ lib {out_lib}",
    command="ar rcs {out_lib} {in_objs}",
)


link_cpp_bin = dict(
    desc      = "Linking C++ bin {rel(out_bin)}",
    toolchain = default_toolchain,
    command   = "{toolchain.linker} {flags} -Wl,--start-group {in_objs} {in_libs} {sys_libs} -Wl,--end-group -o {out_bin}",
    in_objs   = None,
    in_libs   = None,
    flags     = None,
    sys_libs  = None,
)


def cpp_lib(hancho, *, in_srcs=None, in_objs=None, in_libs=None, out_lib, **kwargs):
    in_objs = hancho.flatten(in_objs)
    for file in hancho.flatten(in_srcs):
        obj = hancho(compile_cpp, in_src=file, **kwargs)
        in_objs.append(obj)
    return hancho(link_cpp_lib, in_objs=[in_objs, in_libs], out_lib=out_lib, **kwargs)


def cpp_bin(hancho, *, in_srcs=None, in_objs=None, in_libs=None, out_bin, **kwargs):
    in_objs = hancho.flatten(in_objs)
    for file in hancho.flatten(in_srcs):
        obj = hancho(compile_cpp, in_src=file, **kwargs)
        in_objs.append(obj)
    return hancho(
        link_cpp_bin,
        in_objs=[in_objs, in_libs],
        out_bin=out_bin,
        **kwargs
    )


####################################################################################################
# Makefiles

def make(hancho, *, in_makefile, **kwargs):
    cmd = dict(
        desc="Run makefile {rel(in_makefile)}",
        command="make -C {make_dir} -f {make_file} {flags}",  #  > /dev/null
        make_dir="{path.dirname(in_makefile)}",
        make_file="{path.basename(in_makefile)}",
        flags="--quiet",
    )
    return hancho(cmd, in_makefile=in_makefile, **kwargs)


####################################################################################################
# Tests

run_test = dict(
    desc="Running test {rel(in_test)}",
    command="{in_test} {args} && touch {out_pass}",
    task_dir="{test_dir}",
    test_dir="{mod_dir}",
    args="",
    out_pass="{in_test}.pass",
)

def cpp_test(hancho, *, in_srcs=None, in_objs=None, in_libs=None, out_bin, **kwargs):
    objs = [hancho(compile_cpp, in_src=src, **kwargs) for src in hancho.flatten(in_srcs)]
    test_bin = hancho(
        link_cpp_bin,
        in_objs=[objs, in_objs, in_libs],
        out_bin=out_bin,
        **kwargs
    )
    return hancho(run_test, in_test=test_bin, **kwargs)

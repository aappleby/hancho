
####################################################################################################

hancho(
    command = "g++ src/main.cpp src/util.cpp -o build/app",
)

####################################################################################################

hancho(
    command = "g++ {in_src} -o {out_bin}",
    in_src  = ["src/main.cpp", "src/util.cpp"],
    out_bin = "app",
)

####################################################################################################

main_o = hancho(
    command = "g++ -c {in_src} -o {out_obj}",
    in_src  = "src/main.cpp",
    out_obj = "main.o",
)

util_o = hancho(
    command = "g++ -c {in_src} -o {out_obj}",
    in_src  = "src/util.cpp",
    out_obj = "util.o",
)

hancho(
    command = "g++ {in_objs} -o {out_bin}",
    in_objs = [main_o, util_o],
    out_bin = "app",
)

####################################################################################################

main_o = hancho(
    command = "g++ -MMD -c {in_src} -o {out_obj}",
    in_src  = "src/main.cpp",
    out_obj = "main.o",
    in_depfile  = "main.d",
)

util_o = hancho(
    command = "g++ -MMD -c {in_src} -o {out_obj}",
    in_src  = "src/util.cpp",
    out_obj = "util.o",
    in_depfile  = "util.d",
)

hancho(
    command = "g++ {in_objs} -o {out_bin}",
    in_objs = [main_o, util_o],
    out_bin = "app",
)

####################################################################################################

compile_cpp = hancho.Context(
    desc    = "Compile {in_src} -> {out_obj}",
    command = "g++ -MMD -c {in_src} -o {out_obj}",
    out_obj = "{ext(in_src, '.o')}",
    in_depfile  = "{ext(out_obj, '.d')}",
)

link_cpp = hancho.Context(
    desc    = "Link {in_objs} into {out_bin}",
    command = "g++ {in_objs} -o {out_bin}",
)

main_o = hancho(compile_cpp, in_src = "src/main.cpp")
util_o = hancho(compile_cpp, in_src = "src/util.cpp")
app    = hancho(link_cpp, in_objs = [main_o, util_o], out_bin = "app")

####################################################################################################

rules = hancho.load("rules.hancho")

main_o = hancho(rules.compile_cpp, in_src = "src/main.cpp")
util_o = hancho(rules.compile_cpp, in_src = "src/util.cpp")
app    = hancho(rules.link_cpp, in_objs = [main_o, util_o], out_bin = "app")

#----------------------------------------

compile_cpp = hancho.Context(
    desc    = "Compile {in_src} -> {out_obj}",
    command = "g++ -MMD -c {in_src} -o {out_obj}",
    out_obj = "{ext(in_src, '.o')}",
    in_depfile  = "{ext(out_obj, '.d')}",
)

link_cpp = hancho.Context(
    desc    = "Link {in_objs} into {out_bin}",
    command = "g++ {in_objs} -o {out_bin}",
)

####################################################################################################

rules = hancho.load("rules.hancho")

app = hancho(rules.c_binary, hancho.glob("src/*.cpp"), "app")

#----------------------------------------

compile_cpp = hancho.Context(
    desc    = "Compile {rel(in_src)} -> {rel(out_obj)}",
    command = "g++ -MMD -c {rel(in_src)} -o {rel(out_obj)}",
    out_obj = "{ext(in_src, '.o')}",
    in_depfile  = "{ext(out_obj, '.d')}",
)

link_cpp = hancho.Context(
    desc    = "Link {rel(in_objs)} -> {rel(out_bin)}",
    command = "g++ {rel(in_objs)} -o {rel(out_bin)}",
)

def c_binary(hancho, *, in_srcs, out_bin, **kwargs):
    objs = [hancho(compile_cpp, in_src = file, **kwargs) for file in in_srcs]
    return hancho(link_cpp, in_objs = objs, out_bin = out_bin, **kwargs)

####################################################################################################
# Async/await and custom commands

import asyncio

# Synchronous functions can be used in place of command strings.

def sync_callback(task):
    for abs_file in task.out_txts:
        with open(abs_file, 'w', encoding="utf-8") as file:
            file.write("hello world")
    return task.out_txts

fast_task = hancho.Task(
    command   = sync_callback,
    in_src    = ["src/main.cpp"],
    out_txts  = ["fast1.txt", "fast2.txt", "fast3.txt"],
    repo_name = "tut50",
)

# Asynchronous functions can also be used in place of command strings.

async def async_callback(task):
    for abs_file in task.out_txts:
        with open(abs_file, 'w', encoding="utf-8") as file:
            file.write("hello world")
        await asyncio.sleep(0.1)
    return task.out_txts

slow_task = hancho.Task(
    command   = async_callback,
    in_src    = ["src/main.cpp"],
    out_txts  = ["slow1.txt", "slow2.txt", "slow3.txt"],
    repo_name = "tut50",
)

# Promises that resolve to filenames can be used in place of actual filenames in rules.

async def slow_filename_promise():
    await asyncio.sleep(0.1)
    return ["src/main.cpp"]

echo_task = hancho.Task(
    command = "echo {rel(in_src)} > {rel(out_txt)}",
    in_src  = [slow_filename_promise()],
    out_txt = ["promise1.txt"],
    repo_name = "tut50",
)
